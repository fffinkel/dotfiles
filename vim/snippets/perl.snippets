# #!/usr/bin/perl


# Conditional
snippet if
	if (${1}) {
		${0}
	}

# Conditional if..else
snippet ife
	if (${1}) {
		${2}
	}
	else {
		${0}
	}

# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2}
	}
	elsif (${3}) {
		${4:# elsif...}
	}
	else {
		${0}
	}

snippet eif
	elsif (${1}) {
		${0}
	}

# Unless conditional
snippet unless
	unless (${1}) {
		${0}
	}

# Try/Except
snippet eval
	local $@;
	eval {
		${1:# do something risky...}
	};
	if (my $e = $@) {
		${0:# handle failure...}
	}

# While Loop
snippet wh
	while (${1}) {
		${0}
	}

# Foreach Loop
snippet for
	for my $${1:x} (@${2:array}) {
		${0}
	}

# Package syntax perl >= 5.14
snippet package
	package ${1:`substitute(vim_snippets#Filename('', 'Page Title'), '^.', '\u&', '')`} ${2:0.99};

	${0}

	1;

	__END__

#moose
snippet moose
	use Moose;
	use namespace::autoclean;
	${1:#}BEGIN {extends '${2:ParentClass}'};

	${0}

# Read File
snippet slurp
	my $${1:var} = do { local $/; open my $file, '<', "${2:file}"; <$file> };
	${0}

# strict warnings
snippet strwar
	use strict;
	use warnings;

# call package function without a parameter
snippet pkgm
	__PACKAGE__->${0:package_method}()

# Pod stub
snippet ppod
	=head1 NAME

	${1:ClassName} - ${2:ShortDesc}

	=head1 SYNOPSIS

	  use $1;

	  ${3:# synopsis...}

	=head1 DESCRIPTION

	${0:# longer description...}


	=head1 INTERFACE


	=head1 DEPENDENCIES


	=head1 SEE ALSO

# use test classes
#TODO
snippet tuse
	use Test::More;
	use Test::Deep; # (); # uncomment to stop prototype errors
	use Test::Exception;

# cause failures to print stack trace
snippet debug_trace
	use Carp; # 'verbose';
	# cloak "die"
	# warn "warning"
	$SIG{'__DIE__'} = sub {
		require Carp; Carp::confess
	};

snippet show
	use Data::Show;
	show ${1:$data_r};
snippet moose
	package ${1:`Filename()`};

	#ABSTRACT: ${2}

	use Moose;
	use namespace::autoclean;

	=head1 SYNOPSIS

	=head1 DESCRIPTION

	=head1 ATTRIBUTES

	=head1 METHODS

	=head1 SEE ALSO

	=cut

	__PACKAGE__->meta->make_immutable;

	1;

snippet hasr
	=head2 ${1:attribute}

	Required

	=cut

	has $1 => (
		is       => '${2:ro}',
		isa      => '${3:Str}',
		required => 1,
	);

snippet hasl
	=head2 ${1:attribute}

	=cut

	has $1 => (
		is      => '${2:ro}',
		isa     => '${3:Str}',
		lazy    => 1,
		builder => '_build_$1',
	);

	sub _build_$1 {
		my $self = shift;

		${4}

		return;
	}

snippet hasd
	=head2 ${1:attribute}

	Default $4

	=cut

	has $1 => (
		is      => '${2:ro}',
		isa     => '${3:Str}',
		default => '${4}',
	);

snippet sub
	=head2 ${1:method}

	=cut

	sub $1 {
		my $self = shift;
		return;
	}

snippet test
	#!/usr/bin/zrperl

	use StarterView::Bootstrap test => 1;
	use ZR::Bundle::Test 'v1';
	use strictures 2;

	use ZR::Mock::MySQL -install;
	use ZR::Service::DBIC;
	use ZR::Test::QueryCounter;

	my $schema = zr_dbic('starterview');
	my $org    = $schema->load_sim(
		{
			Org => {
				users => [ {}, {}, {}, {} ],    #
			}
		}
	);
	my @org_users = $org->users->all;
	my $quiz      = $schema->load_sim(
		{
			Quiz => {
				quiz_users => [
					{ user => $org_users[0] },    #
					{ user => $org_users[1] },    #
					{ user => $org_users[2] },    #
				],
				user => $org_users[1],
			},
		}
	);

	{
		my $query_counter = ZR::Test::QueryCounter->new( schema => $schema );
		is $query_counter->query_count, 1, 'only one query executed';
	}

	done_testing();

